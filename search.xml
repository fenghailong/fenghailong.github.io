<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2020前端面试准备，拿不到offer算我输！</title>
      <link href="/2019/12/31/interview-2020/"/>
      <url>/2019/12/31/interview-2020/</url>
      
        <content type="html"><![CDATA[<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a><center>HTML</center></h3><h4 id="1-语义化"><a href="#1-语义化" class="headerlink" title="1.语义化"></a>1.语义化</h4><blockquote><p>Web语义化是指使用恰当语义的html标签、class类名等内容，让页面具有良好的结构与含义，从而让人和机器都能快速理解网页内容。</p></blockquote><ul><li>正确的标签做正确的事情</li><li>页面内容结构化</li><li>无CSS样子时也容易阅读，便于阅读维护和理解</li><li>便于浏览器、搜索引擎解析。 利于爬虫标记、利于SEO</li></ul><h6 id="1-html-语义化"><a href="#1-html-语义化" class="headerlink" title="1. html 语义化"></a>1. html 语义化</h6><blockquote><p>HTML为网页文档内容提供上下文结构和含义。对于HTML体系而言，Web语义化是指使用语义恰当的标签，使页面有良好的结构，让页面元素有含义，便于被浏览器、搜索引擎解析、利于SEO</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>h1 - WEB 语义化<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>nav1 - HTML语义化<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>nav2 - CSS语义化<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">></span></span>                section1 - HTML语义化            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">></span></span>                section2 - CSS语义化            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>time</span> <span class="token attr-name">datetime</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2018-03-23<span class="token punctuation">"</span></span> <span class="token attr-name">pubdate</span><span class="token punctuation">></span></span>time - 2018年03月23日<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>time</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span> footer - by 小维<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="2-css语义化"><a href="#2-css语义化" class="headerlink" title="2.css语义化"></a>2.css语义化</h6><blockquote><p>CSS语义就是class和ID命名的语义,指用易于理解的名称对html标签附加的class或id命名,良好的CSS命名方式减少沟通调试成本，易于理解。    </p></blockquote><p>例: </p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 以表现为中心 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ft margin10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>用户名：小维<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 以信息为中心 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>用户名:小维<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>问</strong>：既然CSS class和ID命名的语义化可以便于阅读理解和减少沟通调试成本，那么我们是不是可以用div 结合class和ID语义化命名的方式来代替html的语义化？</p><p>从代码的层面上来看，使用CSS class语义化的命名也是能够便于阅读和维护的，但是这样子并不利于<strong>SEO</strong>和<strong>屏幕阅读器识别</strong>。</p><hr><h4 id="2-新标签新特性"><a href="#2-新标签新特性" class="headerlink" title="2.新标签新特性"></a>2.新标签新特性</h4><ul><li><strong>新特性</strong></li></ul><ol><li>语意特性,添加 <code>&lt;header&gt;&lt;header/&gt;&lt;nav&gt;&lt;nav&gt;</code>等标签</li><li>多媒体， 用于媒介回放的 video 和 audio 元素</li><li>图像效果，用于绘画的 canvas 元素，svg元素等</li><li>离线 &amp; 存储,对本地离线存储的更好的支持,local Store,Cookies等</li><li>设备兼容特性 ，HTML5提供了前所未有的数据与应用接入开放接口。使外部应用可以直接与浏览器内部的数据直接相连，</li><li>连接特性，更有效的连接工作效率，使得基于页面的实时聊天，更快速的网页游戏体验，更优化的在线交流得到了实现。HTML5拥有更有效的服务器推送技术，Server-Sent Event和WebSockets就是其中的两个特性。</li><li>性能与集成特性，HTML5会通过XMLHttpRequest2等技术，帮助您的Web应用和网站在多样化的环境中更快速的工作</li></ol><ul><li><strong>新标签</strong></li></ul><ol><li>多媒体：<code>&lt;audio&gt;&lt;/audio&gt;, &lt;video&gt;&lt;video&gt;,&lt;source&gt;&lt;/source&gt;, &lt;embed&gt;&lt;/embed&gt;, &lt;track&gt;&lt;/track&gt;</code></li><li>新表单元素：<code>&lt;datalist&gt; ,&lt;output&gt; , &lt;keygen&gt;</code></li><li>新文档节段和纲要: <code>&lt;header&gt;页面头部、&lt;section&gt;章节、&lt;aside&gt;边栏、&lt;article&gt;文档内容、&lt;footer&gt;页面底部、&lt;section&gt;章节、&lt;aside&gt;边栏、&lt;article&gt;文档内容、&lt;footer&gt;页面底部等</code></li></ol><p><strong>注：</strong> 使用html5shiv可以解决ie低版本不兼容的问题，只需要在head中加上,当版本低于IE9时，浏览器会加载html5.js脚本，使得支持html5的新功能，也可以将脚本文件下载到本地。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--[if lt IE 9]>  &lt;script src='http://apps.bdimg.com/libs/html5shiv/3.7/html5shiv.min.js'>  &lt;/script>  &lt;![endif]--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-html5-和h5的区别"><a href="#3-html5-和h5的区别" class="headerlink" title="3.html5 和h5的区别"></a>3.html5 和h5的区别</h4><ol><li><p>html5 是公认的web开发的html规范，是一系列关于html的标准，它就好比是国家的法律，比如未成年不准进网吧，网吧要是允许未成年人进入，国家就要对网吧和未成年人进行处罚和教育。同样的，你写的html网页不遵守html5规范，可能导致你的网页在浏览器上出现一系列问题，后果自负。</p></li><li><p>h5是一系列技术的集合，它是应用一系列的web技术出现的产物。</p></li></ol><h4 id="4-input和textarea的区别"><a href="#4-input和textarea的区别" class="headerlink" title="4.input和textarea的区别"></a>4.input和textarea的区别</h4><ol><li>需要指定type属性，如text，password等，通过size属性指定显示字符的长度，value属性指定初始值，Maxlength属性指定文本框可以输入的最长长度，焦点垂直居中文本框中，单行。</li><li>需要来封闭标签，内容写在标签对中，使用row、col指定textarea大小，焦点在左上角，多行。</li></ol><h4 id="5-用一个div模拟textarea的实现"><a href="#5-用一个div模拟textarea的实现" class="headerlink" title="5.用一个div模拟textarea的实现"></a>5.用一个div模拟textarea的实现</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text_box<span class="token punctuation">"</span></span> <span class="token attr-name">contenteditable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="6-移动设备忽略将页面中的数字识别为电话号码的方法"><a href="#6-移动设备忽略将页面中的数字识别为电话号码的方法" class="headerlink" title="6.移动设备忽略将页面中的数字识别为电话号码的方法"></a>6.移动设备忽略将页面中的数字识别为电话号码的方法</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>format-detection<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>telephone<span class="token punctuation">=</span>no, email<span class="token punctuation">=</span>no<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a><center>CSS</center></h3><h4 id="1-盒模型"><a href="#1-盒模型" class="headerlink" title="1.盒模型"></a>1.盒模型</h4><p>基本理解：每个html标签都是一个方块，这些方块可以同时包着其他方块，如同盒子一层层的包裹，这就是盒模型。盒模型一共有两种：IE盒模型和W3C标准盒模型。</p><ul><li><h5 id="IE盒模型"><a href="#IE盒模型" class="headerlink" title="IE盒模型"></a>IE盒模型</h5><p><em>属性width,height只包含内容content，不包含border和padding。</em></p></li><li><h5 id="W3C标准盒模型"><a href="#W3C标准盒模型" class="headerlink" title="W3C标准盒模型"></a>W3C标准盒模型</h5><p><em>属性width,height包含border和padding，指的是content+padding+border。</em></p></li><li><h5 id="互相转化"><a href="#互相转化" class="headerlink" title="互相转化"></a>互相转化</h5><p><em>通过box-sizing来设置，content-box指W3C标准盒模型，border-box指的是IE盒模型，box-sizing的默认值为content-box</em></p></li></ul><h4 id="2-flex"><a href="#2-flex" class="headerlink" title="2.flex"></a>2.flex</h4><h4 id="3-css单位"><a href="#3-css单位" class="headerlink" title="3.css单位"></a>3.css单位</h4><h4 id="4-css选择器"><a href="#4-css选择器" class="headerlink" title="4.css选择器"></a>4.css选择器</h4><h4 id="5-bfc-清除浮动"><a href="#5-bfc-清除浮动" class="headerlink" title="5.bfc 清除浮动"></a>5.bfc 清除浮动</h4><h4 id="6-层叠上下文"><a href="#6-层叠上下文" class="headerlink" title="6.层叠上下文"></a>6.层叠上下文</h4><h4 id="7-常见页面布局"><a href="#7-常见页面布局" class="headerlink" title="7.常见页面布局"></a>7.常见页面布局</h4><h4 id="8-响应式布局"><a href="#8-响应式布局" class="headerlink" title="8.响应式布局"></a>8.响应式布局</h4><h4 id="9-css预处理，后处理"><a href="#9-css预处理，后处理" class="headerlink" title="9.css预处理，后处理"></a>9.css预处理，后处理</h4><h4 id="10-css3新特性"><a href="#10-css3新特性" class="headerlink" title="10.css3新特性"></a>10.css3新特性</h4><h5 id="1-animation和transiton的相关属性"><a href="#1-animation和transiton的相关属性" class="headerlink" title="1.animation和transiton的相关属性"></a>1.animation和transiton的相关属性</h5><h5 id="2-animate和translate"><a href="#2-animate和translate" class="headerlink" title="2.animate和translate"></a>2.animate和translate</h5><h4 id="11-display哪些取值"><a href="#11-display哪些取值" class="headerlink" title="11.display哪些取值"></a>11.display哪些取值</h4><h4 id="12-相邻的两个inline-block节点为什么会出现间隔，该如何解决"><a href="#12-相邻的两个inline-block节点为什么会出现间隔，该如何解决" class="headerlink" title="12.相邻的两个inline-block节点为什么会出现间隔，该如何解决"></a>12.相邻的两个inline-block节点为什么会出现间隔，该如何解决</h4><h4 id="13-meta-viewport-移动端适配"><a href="#13-meta-viewport-移动端适配" class="headerlink" title="13.meta viewport 移动端适配"></a>13.meta viewport 移动端适配</h4><h4 id="14-CSS实现宽度自适应100-，宽高16-9的比例的矩形"><a href="#14-CSS实现宽度自适应100-，宽高16-9的比例的矩形" class="headerlink" title="14.CSS实现宽度自适应100%，宽高16:9的比例的矩形"></a>14.CSS实现宽度自适应100%，宽高16:9的比例的矩形</h4><h4 id="15-rem布局的优缺点"><a href="#15-rem布局的优缺点" class="headerlink" title="15.rem布局的优缺点"></a>15.rem布局的优缺点</h4><h4 id="16-画三角形"><a href="#16-画三角形" class="headerlink" title="16.画三角形"></a>16.画三角形</h4><h4 id="17-1像素边框问题"><a href="#17-1像素边框问题" class="headerlink" title="17.1像素边框问题"></a>17.1像素边框问题</h4><center>（待更新）</center><h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><ul><li>1、原型/原型链/构造函数/实例/继承</li><li>2、有几种方式可以实现继承</li><li>3、用原型实现继承有什么缺点，怎么解决</li><li>4、arguments</li><li>5、数据类型判断</li><li>6、作用域链、闭包、作用域</li><li>7、Ajax的原生写法</li><li>8、对象深拷贝、浅拷贝</li><li>9、图片懒加载、预加载</li><li>10、实现页面加载进度条</li><li>11、this关键字</li><li>12、函数式编程</li><li>13、手动实现parseInt</li><li>14、为什么会有同源策略</li><li>15、怎么判断两个对象是否相等</li><li>16、事件模型<ul><li>事件委托、代理</li><li>如何让事件先冒泡后捕获</li></ul></li><li>17、window的onload事件和domcontentloaded</li><li>18、for…in迭代和for…of有什么区别</li><li>19、函数柯里化</li><li>20、call apply区别，原生实现bind<ul><li>call，apply，bind 三者用法和区别：角度可为参数、绑定规则（显示绑定和强绑定），运行效率、运行情况。</li></ul></li><li>21、async/await</li><li>22、立即执行函数和使用场景</li><li>23、设计模式(要求说出如何实现,应用,优缺点)/单例模式实现</li><li>24、iframe的缺点有哪些</li><li>25、数组问题<ul><li>数组去重</li><li>数组常用方法</li><li>查找数组重复项</li><li>扁平化数组</li><li>按数组中各项和特定值差值排序</li></ul></li><li>26、BOM属性对象方法</li><li>27、服务端渲染</li><li>28、垃圾回收机制</li><li>29、eventloop<ul><li>进程和线程</li><li>任务队列</li></ul></li><li>30、如何快速让字符串变成已千为精度的数字</li></ul><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><ul><li>1、声明 let、const</li><li>2、解构赋值</li><li>3、声明类与继承：class、extend</li><li>4、Promise的使用与实现</li><li>5、generator（异步编程、yield、next()、await 、async）</li><li>6、箭头函数this指向问题、拓展运算符</li><li>7、map和set有没有用过，如何实现一个数组去重，map数据结构有什么优点？</li><li>8、ES6怎么编译成ES5,css-loader原理,过程</li><li>9、ES6转成ES5的常见例子<ul><li>使用es5实现es6的class</li></ul></li></ul><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><ul><li>1、输入url到展示页面过程发生了什么？</li><li>2、重绘与回流<ul><li>重绘(repaint): 当元素样式的改变不影响布局时，浏览器将使用重绘对元素进行更新，此时由于只需要UI层面的重新像素绘制，因此 损耗较少</li><li>回流(reflow): 当元素的尺寸、结构或触发某些属性时，浏览器会重新渲染页面，称为回流。此时，浏览器需要重新经过计算，计算后还需要重新页面布局，因此是较重的操作。会触发回流的操作:<br> * 页面初次渲染<br> * 浏览器窗口大小改变<br> * 元素尺寸、位置、内容发生改变<br> * 元素字体大小变化<br> * 添加或者删除可见的 dom 元素<br> * 激活 CSS 伪类（例如：:hover）<br> * 查询某些属性或调用某些方法<br> * clientWidth、clientHeight、clientTop、clientLeft<br> * offsetWidth、offsetHeight、offsetTop、offsetLeft<br> * scrollWidth、scrollHeight、scrollTop、scrollLeft<br> * getComputedStyle()<br> * getBoundingClientRect()<br> * scrollTo()<br> <strong>回流必定触发重绘，重绘不一定触发回流。重绘的开销较小，回流的代价较高。</strong></li></ul></li><li>3、防抖与节流</li><li>4、cookies、session、sessionStorage、localStorage</li><li>5、浏览器内核</li></ul><h2 id="服务端与网络"><a href="#服务端与网络" class="headerlink" title="服务端与网络"></a>服务端与网络</h2><ul><li>1、常见状态码</li><li>2、缓存<ul><li>200 From cache和200 ok</li><li>400,401,403状态码分别代表什么</li><li>浏览器缓存</li></ul></li><li>3、cookie, session, token</li><li>4、前端持久化的方式、区别</li><li>5、DNS是怎么解析的</li><li>6、cdn</li><li>7、计算机网络的相关协议</li><li>8、http/https/http2.0</li><li>9、get post区别</li><li>10、ajax、 axios库</li><li>11、tcp三次握手，四次挥手流程</li><li>12、跨域</li><li>13、前端安全XSS、CSRF</li><li>14、websocket</li><li>15、Http请求中的keep-alive有了解吗</li><li>16、网络分层</li><li>17、即时通信，除了Ajax和websocket</li><li>18、模块化，commonJS，es6，cmd，amd</li></ul><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><ul><li>1、vue解决了什么问题</li><li>2、MVVM的理解</li><li>3、如何实现一个自定义组件，不同组件之间如何通信的？</li><li>4、nextTick</li><li>5、生命周期</li><li>6、虚拟dom的原理</li><li>7、双向绑定的原理？数据劫持？</li><li>8、组件通信<ul><li>父-&gt;子</li><li>子-&gt;父</li><li>非父子组件</li></ul></li><li>9、Proxy 相比于 defineProperty 的优势</li><li>10、watch computed区别</li><li>11、virtual dom 原理实现</li><li>12、vue-router(hash， HTML5 新增的 pushState<ul><li>单页应用，如何实现其路由功能—路由原理</li><li>vue-router如何做用户登录权限等</li><li>你在项目中怎么实现路由的嵌套</li></ul></li><li>13、vuex的理解</li></ul><h2 id="前端性能优化"><a href="#前端性能优化" class="headerlink" title="前端性能优化"></a>前端性能优化</h2><ul><li>页面DOM节点太多，会出现什么问题？如何优化？</li><li>如何做性能监测</li></ul><h2 id="SEO和语义化"><a href="#SEO和语义化" class="headerlink" title="SEO和语义化"></a>SEO和语义化</h2><p>这个没被问过</p><h2 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h2><p>微信小程序和h5差异，如果有开发weex的经验，可能会加上weex</p><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p>一些基本命令</p><h2 id="打包工具webpack"><a href="#打包工具webpack" class="headerlink" title="打包工具webpack"></a>打包工具webpack</h2><ul><li>1、打包原理</li><li>2、打包插件</li><li>3、webpack热更新原理</li><li>4、优化构建速度</li></ul><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ul><li>1、排序算法</li><li>2、动态规划，参见背包问题</li><li>3、二叉树</li><li>4、加油站问题(贪心算法)</li><li>5、二分法</li><li>6、二叉树遍历</li><li>7、单链表反转</li><li>8、取1000个数字里面的质数</li><li>9、找出数组中和为给定值的两个元素，如：[1, 2, 3, 4, 5]中找出和为6的两个元素。</li><li>10、线性顺序存储结构和链式存储结构有什么区别？以及优缺点</li></ul><h2 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h2><ul><li>1、自适应</li><li>2、pwa</li><li>3、移动端手势</li></ul><h2 id="附加题"><a href="#附加题" class="headerlink" title="附加题"></a>附加题</h2><ul><li>1、无限滚动方案</li><li>2、如何处理兼容性问题</li><li>3、你遇到过最难的问题是什么</li><li>4、ES6 class与ES5 function区别及联系</li><li>5、vue怎么监听数组</li><li>6、写过webpack loader吗</li><li>7、微信网页版登录机制思考</li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
